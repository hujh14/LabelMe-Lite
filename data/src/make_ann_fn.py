import argparse
import os
import numpy as np
import pickle
import json

from pycocotools.coco import COCO

from dummy_datasets import get_coco_dataset

def convert_from_cls_format(cls_boxes, cls_segms, cls_keyps):
    """Convert from the class boxes/segms/keyps format generated by the testing
    code.
    """
    box_list = [b for b in cls_boxes if len(b) > 0]
    if len(box_list) > 0:
        boxes = np.concatenate(box_list)
    else:
        boxes = None
    if cls_segms is not None:
        segms = [s for slist in cls_segms for s in slist]
    else:
        segms = None
    if cls_keyps is not None:
        keyps = [k for klist in cls_keyps for k in klist]
    else:
        keyps = None
    classes = []
    for j in range(len(cls_boxes)):
        classes += [j] * len(cls_boxes[j])
    return boxes, segms, keyps, classes


def create_ann_fn(detections, category_list):
    im_list = list(detections.keys())
    im_list.sort()

    annId = 0
    images = []
    annotations = []
    categories = []
    for imgId, im in enumerate(im_list):
        img = {}
        img["file_name"] = os.path.basename(im)
        img["id"] = imgId
        images.append(img)
        print(img["id"], img["file_name"])

        cls_boxes, cls_segms, cls_keyps = detections[im]
        boxes, segms, keypoints, classes = convert_from_cls_format(cls_boxes, cls_segms, cls_keyps)
        if segms is None:
            continue

        for i in range(len(segms)):
            segm = segms[i]
            score = boxes[i, -1]
            cat = classes[i]

            ann = {}
            ann["segmentation"] = segm
            ann["category_id"] = cat
            ann["score"] = score.item()
            ann["image_id"] = imgId
            ann["id"] = annId
            annotations.append(ann)
            annId += 1
        print(ann["score"], ann["category_id"])

    for i, name in enumerate(category_list):
        categories.append({"id": i, "name": name})

    ann_fn = {}
    ann_fn["images"] = images
    ann_fn["annotations"] = annotations
    ann_fn["categories"] = categories
    return ann_fn

if __name__ == "__main__":
    detection_fn = "/Users/hujh/Downloads/detections.pkl"
    with open(detection_fn, 'rb') as f:
        detections = pickle.load(f)
        category_list = get_coco_dataset()
        ann_fn = create_ann_fn(detections, category_list)

        with open('../annotations/ade20k/ade20k_val_predictions.json', 'w') as outfile:
            json.dump(ann_fn, outfile, indent=2)


